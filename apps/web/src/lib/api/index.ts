/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Unified API
 * The Unified API description
 * OpenAPI spec version: 1.0
 */
import { customFetch } from './custom-fetch';
export type AuthorizeParams = {
client_id: unknown;
redirect_uri: unknown;
code_challenge?: unknown;
code_challenge_method?: unknown;
state?: unknown;
nonce?: unknown;
login_hint?: unknown;
response_type: unknown;
scope: unknown;
};

export type GetAuthorizeInfoParams = {
client_id: unknown;
redirect_uri: unknown;
code_challenge?: unknown;
code_challenge_method?: unknown;
state?: unknown;
nonce?: unknown;
login_hint?: unknown;
response_type: unknown;
scope: unknown;
};

export type JwksResponseDtoKeysItem = {
  kid: string;
  use: string;
  alg: string;
  kty: string;
  n: string;
  e: string;
};

export interface JwksResponseDto {
  keys: JwksResponseDtoKeysItem[];
}

export interface OpenidConfigurationResponseDto {
  issuer: string;
  jwks_uri: string;
  authorization_endpoint: string;
  token_endpoint: string;
  userinfo_endpoint: string;
  scopes_supported: string[];
  claims_supported: string[];
  grant_types_supported: string[];
  subject_types_supported: string[];
  response_types_supported: string[];
  code_challenge_methods_supported: string[];
  id_token_signing_alg_values_supported: string[];
  authorization_signing_alg_values_supported: string[];
  token_endpoint_auth_methods_supported: string[];
  prompt_values_supported: string[];
}

export interface UserInfoDto {
  sub?: string;
  preferred_username?: string;
  given_name?: string;
  family_name?: string;
  name?: string;
  email?: string;
  email_verified?: boolean;
  /** @nullable */
  phone?: string | null;
  phone_verified?: boolean;
  locale?: string;
  /** @nullable */
  picture?: string | null;
  updated_at?: string;
  scope?: string;
}

export interface ExchangeTokenResponseDto {
  token_type: string;
  expires_in: number;
  access_token: string;
  scope: string;
  refresh_token?: string;
  refresh_token_expires_in?: number;
  id_token?: string;
}

export type AuthorizePostResponseMode = typeof AuthorizePostResponseMode[keyof typeof AuthorizePostResponseMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthorizePostResponseMode = {
  fragment: 'fragment',
  query: 'query',
} as const;

export type AuthorizePostResponseClient = {
  id: string;
};

export interface AuthorizePostResponse {
  client: AuthorizePostResponseClient;
  code: string;
  redirect_uri: string;
  state?: string;
  id_token?: string;
  mode: AuthorizePostResponseMode;
}

export type AuthorizeGetResponseClient = {
  id: string;
  name: string;
  picture?: string;
  enabled?: boolean;
  contactEmail: string;
  privacyPolicyUrl?: string;
  termsUrl?: string;
  isAuthorized: boolean;
};

export type AuthorizeGetResponseScopeDetails = {
  requestedScopes: string[];
  extraScopes: string[];
  grantedScopes: string[];
  scopesGranted: boolean;
};

export type AuthorizeGetResponseUser = {
  id: string;
  login_hint: string;
  isHinted: boolean;
};

export interface AuthorizeGetResponse {
  user: AuthorizeGetResponseUser;
  scopeDetails: AuthorizeGetResponseScopeDetails;
  client: AuthorizeGetResponseClient;
}

export type UpdateClientDtoScopesItem = typeof UpdateClientDtoScopesItem[keyof typeof UpdateClientDtoScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateClientDtoScopesItem = {
  openid: 'openid',
  profile: 'profile',
  email: 'email',
  offline_access: 'offline_access',
} as const;

export interface UpdateClientDto {
  name?: string;
  picture?: string;
  redirectUri?: string[];
  scopes?: UpdateClientDtoScopesItem[];
  contactEmail?: string;
  privacyPolicyUrl?: string;
  termsUrl?: string;
}

export type ClientOkResponseUser = {
  id: string;
};

export interface ClientOkResponse {
  id: string;
  name: string;
  picture?: string;
  enabled?: boolean;
  contactEmail: string;
  privacyPolicyUrl?: string;
  termsUrl?: string;
  user: ClientOkResponseUser;
  scopes: string[];
  redirectUri: string[];
  createdAt: string;
  updatedAt: string;
}

export type ClientOkResponseWithSecretUser = {
  id: string;
};

export interface ClientOkResponseWithSecret {
  id: string;
  name: string;
  picture?: string;
  enabled?: boolean;
  contactEmail: string;
  privacyPolicyUrl?: string;
  termsUrl?: string;
  user: ClientOkResponseWithSecretUser;
  scopes: string[];
  redirectUri: string[];
  createdAt: string;
  updatedAt: string;
  secret: string;
}

export type CreateClientDtoScopesItem = typeof CreateClientDtoScopesItem[keyof typeof CreateClientDtoScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateClientDtoScopesItem = {
  openid: 'openid',
  profile: 'profile',
  email: 'email',
  offline_access: 'offline_access',
} as const;

export interface CreateClientDto {
  name: string;
  picture?: string;
  redirectUri: string[];
  scopes: CreateClientDtoScopesItem[];
  contactEmail: string;
  privacyPolicyUrl?: string;
  termsUrl?: string;
  enabled?: boolean;
}

export type DisableTwoFactorResponseUser = {
  id: string;
};

export interface DisableTwoFactorResponse {
  user: DisableTwoFactorResponseUser;
  enabled: boolean;
}

export type ConfirmTwoFactorResponseUser = {
  id: string;
};

export interface ConfirmTwoFactorResponse {
  user: ConfirmTwoFactorResponseUser;
  enabled: boolean;
}

export interface ConfirmTwoFactorDto {
  code: string;
}

export interface BadRequestException { [key: string]: unknown }

export type EnableTwoFactorResponseUser = {
  id: string;
};

export interface EnableTwoFactorResponse {
  user: EnableTwoFactorResponseUser;
  enabled: boolean;
  message: string;
  qrcode: string;
  url: string;
}

export type GetSignedUrlResponseUser = {
  id: string;
  picture: string;
};

export interface GetSignedUrlResponse {
  user: GetSignedUrlResponseUser;
  signedUrl: string;
  requiredHeaders: string[];
  expiresIn: string;
  lastModified: string;
}

export type UpdatePasswordDtoOtp = {
  /**
   * @minLength 6
   * @maxLength 6
   */
  code: string;
};

export interface UpdatePasswordDto {
  /** @minLength 8 */
  password: string;
  /** @minLength 8 */
  newPassword: string;
  otp?: UpdatePasswordDtoOtp;
  revokeSession?: boolean;
  revokeTrustedDevices?: boolean;
}

export interface ErrorResponseDto {
  message: string;
  error: string;
  statusCode: number;
}

export interface ErrorsObject {
  message: string;
  errors: string;
  timestamp: string;
  path: string;
  requestId: string;
}

export interface HttpExceptionEntity {
  statusCode: number;
  error: ErrorsObject;
}

export type GetAppsResponseDtoItemClient = {
  id: string;
  name: string;
  /** @nullable */
  picture: string | null;
  contactEmail: string;
};

export type GetAppsResponseDtoItemScopesItem = typeof GetAppsResponseDtoItemScopesItem[keyof typeof GetAppsResponseDtoItemScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAppsResponseDtoItemScopesItem = {
  openid: 'openid',
  profile: 'profile',
  email: 'email',
  offline_access: 'offline_access',
} as const;

export type GetAppsResponseDtoItem = {
  id: string;
  clientId: string;
  userId: string;
  scopes: GetAppsResponseDtoItemScopesItem[];
  createdAt: string;
  updatedAt: string;
  client: GetAppsResponseDtoItemClient;
};

export type GetAppsResponseDto = GetAppsResponseDtoItem[];

export type SessionResponseUser = {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  username: string;
  /** @nullable */
  picture: string | null;
  emailVerified: boolean;
  otp: boolean;
  /** @nullable */
  otpType: string | null;
};

export interface SessionResponse {
  user: SessionResponseUser;
  id: string;
  userId: string;
  userAgent: string;
  requestIp: string;
  createdAt: unknown;
  expiresAt: unknown;
}

export type ContinueLoginDtoIdentity = {
  email: string;
  /** @minLength 8 */
  password: string;
  trust?: boolean;
};

export type ContinueLoginDtoOtp = {
  /**
   * @minLength 6
   * @maxLength 6
   */
  code: string;
  type: string;
};

export interface ContinueLoginDto {
  otp: ContinueLoginDtoOtp;
  identity: ContinueLoginDtoIdentity;
}

export type LoginSession = {
  id: string;
  userId: string;
  userAgent: string;
  requestIp: string;
  createdAt: unknown;
  expiresAt: unknown;
};

export type LoginOtp = {
  required: boolean;
  type?: string;
};

export type LoginUser = {
  id: string;
};

export interface Login {
  user: LoginUser;
  otp: LoginOtp;
  session?: LoginSession;
}

export type LoginUserDtoCaptcha = {
  token: string;
};

export type LoginUserDtoIdentity = {
  email: string;
  /** @minLength 8 */
  password: string;
  trust?: boolean;
};

export interface LoginUserDto {
  identity: LoginUserDtoIdentity;
  captcha: LoginUserDtoCaptcha;
}

export type RegisterSession = {
  id: string;
  userId: string;
  userAgent: string;
  requestIp: string;
  createdAt: unknown;
  expiresAt: unknown;
};

export type RegisterUser = {
  id: string;
  email: string;
  username: string;
};

export interface Register {
  user: RegisterUser;
  session: RegisterSession;
}

export type RegisterUserDtoCaptcha = {
  token: string;
};

export interface RegisterUserDto {
  /** @minLength 3 */
  firstName: string;
  /** @minLength 3 */
  lastName: string;
  email: string;
  /** @nullable */
  phone: string | null;
  /**
   * @minLength 3
   * @pattern ^[a-zA-Z0-9]+$
   */
  username: string;
  /** @minLength 8 */
  password: string;
  captcha: RegisterUserDtoCaptcha;
}



export type registerUserResponse = {
  data: Register;
  status: number;
  headers: Headers;
}

export const getRegisterUserUrl = () => {


  return `http://10.1.1.17:3000/v1/identity/register`
}

export const registerUser = async (registerUserDto: RegisterUserDto, options?: RequestInit): Promise<registerUserResponse> => {
  
  return customFetch<registerUserResponse>(getRegisterUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      registerUserDto,)
  }
);}



export type logoutUserResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getLogoutUserUrl = () => {


  return `http://10.1.1.17:3000/v1/identity/logout`
}

export const logoutUser = async ( options?: RequestInit): Promise<logoutUserResponse> => {
  
  return customFetch<logoutUserResponse>(getLogoutUserUrl(),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type loginUserResponse = {
  data: Login;
  status: number;
  headers: Headers;
}

export const getLoginUserUrl = () => {


  return `http://10.1.1.17:3000/v1/identity/login`
}

export const loginUser = async (loginUserDto: LoginUserDto, options?: RequestInit): Promise<loginUserResponse> => {
  
  return customFetch<loginUserResponse>(getLoginUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginUserDto,)
  }
);}



export type otpLoginUserResponse = {
  data: Login;
  status: number;
  headers: Headers;
}

export const getOtpLoginUserUrl = () => {


  return `http://10.1.1.17:3000/v1/identity/login/continue`
}

export const otpLoginUser = async (continueLoginDto: ContinueLoginDto, options?: RequestInit): Promise<otpLoginUserResponse> => {
  
  return customFetch<otpLoginUserResponse>(getOtpLoginUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      continueLoginDto,)
  }
);}



export type getSessionResponse = {
  data: SessionResponse;
  status: number;
  headers: Headers;
}

export const getGetSessionUrl = () => {


  return `http://10.1.1.17:3000/v1/identity/session`
}

export const getSession = async ( options?: RequestInit): Promise<getSessionResponse> => {
  
  return customFetch<getSessionResponse>(getGetSessionUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAuthorizedClientsResponse = {
  data: GetAppsResponseDto | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getGetAuthorizedClientsUrl = () => {


  return `http://10.1.1.17:3000/v1/account/apps`
}

export const getAuthorizedClients = async ( options?: RequestInit): Promise<getAuthorizedClientsResponse> => {
  
  return customFetch<getAuthorizedClientsResponse>(getGetAuthorizedClientsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type revokeClientResponse = {
  data: HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getRevokeClientUrl = (id: string,) => {


  return `http://10.1.1.17:3000/v1/account/apps/${id}/revoke`
}

export const revokeClient = async (id: string, options?: RequestInit): Promise<revokeClientResponse> => {
  
  return customFetch<revokeClientResponse>(getRevokeClientUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type updatePasswordResponse = {
  data: HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getUpdatePasswordUrl = () => {


  return `http://10.1.1.17:3000/v1/account/update-password`
}

export const updatePassword = async (updatePasswordDto: UpdatePasswordDto, options?: RequestInit): Promise<updatePasswordResponse> => {
  
  return customFetch<updatePasswordResponse>(getUpdatePasswordUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updatePasswordDto,)
  }
);}



export type getSignedProfilePictureUrlResponse = {
  data: GetSignedUrlResponse | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getGetSignedProfilePictureUrlUrl = () => {


  return `http://10.1.1.17:3000/v1/account/profile/picture/sign`
}

export const getSignedProfilePictureUrl = async ( options?: RequestInit): Promise<getSignedProfilePictureUrlResponse> => {
  
  return customFetch<getSignedProfilePictureUrlResponse>(getGetSignedProfilePictureUrlUrl(),
  {      
    ...options,
    method: 'PUT'
    
    
  }
);}



export type completeProfilePictureUploadResponse = {
  data: HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getCompleteProfilePictureUploadUrl = () => {


  return `http://10.1.1.17:3000/v1/account/profile/picture/sign/complete`
}

export const completeProfilePictureUpload = async ( options?: RequestInit): Promise<completeProfilePictureUploadResponse> => {
  
  return customFetch<completeProfilePictureUploadResponse>(getCompleteProfilePictureUploadUrl(),
  {      
    ...options,
    method: 'PUT'
    
    
  }
);}



export type enableTwoFactorResponse = {
  data: EnableTwoFactorResponse | BadRequestException;
  status: number;
  headers: Headers;
}

export const getEnableTwoFactorUrl = () => {


  return `http://10.1.1.17:3000/v1/account/mfa/enable`
}

export const enableTwoFactor = async ( options?: RequestInit): Promise<enableTwoFactorResponse> => {
  
  return customFetch<enableTwoFactorResponse>(getEnableTwoFactorUrl(),
  {      
    ...options,
    method: 'PUT'
    
    
  }
);}



export type confirmTwoFactorResponse = {
  data: ConfirmTwoFactorResponse | BadRequestException;
  status: number;
  headers: Headers;
}

export const getConfirmTwoFactorUrl = () => {


  return `http://10.1.1.17:3000/v1/account/mfa/enable/confirm`
}

export const confirmTwoFactor = async (confirmTwoFactorDto: ConfirmTwoFactorDto, options?: RequestInit): Promise<confirmTwoFactorResponse> => {
  
  return customFetch<confirmTwoFactorResponse>(getConfirmTwoFactorUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      confirmTwoFactorDto,)
  }
);}



export type disableTwoFactorResponse = {
  data: DisableTwoFactorResponse | BadRequestException;
  status: number;
  headers: Headers;
}

export const getDisableTwoFactorUrl = () => {


  return `http://10.1.1.17:3000/v1/account/mfa/disable`
}

export const disableTwoFactor = async (confirmTwoFactorDto: ConfirmTwoFactorDto, options?: RequestInit): Promise<disableTwoFactorResponse> => {
  
  return customFetch<disableTwoFactorResponse>(getDisableTwoFactorUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      confirmTwoFactorDto,)
  }
);}



export type createClientResponse = {
  data: ClientOkResponseWithSecret | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getCreateClientUrl = () => {


  return `http://10.1.1.17:3000/v1/clients`
}

export const createClient = async (createClientDto: CreateClientDto, options?: RequestInit): Promise<createClientResponse> => {
  
  return customFetch<createClientResponse>(getCreateClientUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createClientDto,)
  }
);}



export type findAllResponse = {
  data: ClientOkResponse[] | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getFindAllUrl = () => {


  return `http://10.1.1.17:3000/v1/clients`
}

export const findAll = async ( options?: RequestInit): Promise<findAllResponse> => {
  
  return customFetch<findAllResponse>(getFindAllUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type renewSecretResponse = {
  data: ClientOkResponseWithSecret | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getRenewSecretUrl = (id: string,) => {


  return `http://10.1.1.17:3000/v1/clients/secret/renew/${id}`
}

export const renewSecret = async (id: string, options?: RequestInit): Promise<renewSecretResponse> => {
  
  return customFetch<renewSecretResponse>(getRenewSecretUrl(id),
  {      
    ...options,
    method: 'PUT'
    
    
  }
);}



export type updateClientResponse = {
  data: ClientOkResponse | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getUpdateClientUrl = (id: string,) => {


  return `http://10.1.1.17:3000/v1/clients/${id}`
}

export const updateClient = async (id: string,
    updateClientDto: UpdateClientDto, options?: RequestInit): Promise<updateClientResponse> => {
  
  return customFetch<updateClientResponse>(getUpdateClientUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateClientDto,)
  }
);}



export type switchClientResponse = {
  data: ClientOkResponse | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getSwitchClientUrl = (id: string,) => {


  return `http://10.1.1.17:3000/v1/clients/switch/${id}`
}

export const switchClient = async (id: string, options?: RequestInit): Promise<switchClientResponse> => {
  
  return customFetch<switchClientResponse>(getSwitchClientUrl(id),
  {      
    ...options,
    method: 'PUT'
    
    
  }
);}



export type getAuthorizeInfoResponse = {
  data: AuthorizeGetResponse | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getGetAuthorizeInfoUrl = (params: GetAuthorizeInfoParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://10.1.1.17:3000/v1/oauth/authorize?${normalizedParams.toString()}` : `http://10.1.1.17:3000/v1/oauth/authorize`
}

export const getAuthorizeInfo = async (params: GetAuthorizeInfoParams, options?: RequestInit): Promise<getAuthorizeInfoResponse> => {
  
  return customFetch<getAuthorizeInfoResponse>(getGetAuthorizeInfoUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type authorizeResponse = {
  data: AuthorizePostResponse | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getAuthorizeUrl = (params: AuthorizeParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://10.1.1.17:3000/v1/oauth/authorize?${normalizedParams.toString()}` : `http://10.1.1.17:3000/v1/oauth/authorize`
}

export const authorize = async (params: AuthorizeParams, options?: RequestInit): Promise<authorizeResponse> => {
  
  return customFetch<authorizeResponse>(getAuthorizeUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



export type exchangeTokenResponse = {
  data: ExchangeTokenResponseDto | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getExchangeTokenUrl = () => {


  return `http://10.1.1.17:3000/v1/oauth/token`
}

export const exchangeToken = async ( options?: RequestInit): Promise<exchangeTokenResponse> => {
  
  return customFetch<exchangeTokenResponse>(getExchangeTokenUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



export type testResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getTestUrl = () => {


  return `http://10.1.1.17:3000/v1/oauth/token`
}

export const test = async ( options?: RequestInit): Promise<testResponse> => {
  
  return customFetch<testResponse>(getTestUrl(),
  {      
    ...options,
    method: 'PUT'
    
    
  }
);}



export type getUserInfoResponse = {
  data: UserInfoDto | HttpExceptionEntity | ErrorResponseDto;
  status: number;
  headers: Headers;
}

export const getGetUserInfoUrl = () => {


  return `http://10.1.1.17:3000/v1/oauth/userinfo`
}

export const getUserInfo = async ( options?: RequestInit): Promise<getUserInfoResponse> => {
  
  return customFetch<getUserInfoResponse>(getGetUserInfoUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getOpenidConfigurationResponse = {
  data: OpenidConfigurationResponseDto;
  status: number;
  headers: Headers;
}

export const getGetOpenidConfigurationUrl = () => {


  return `http://10.1.1.17:3000/.well-known/openid-configuration`
}

export const getOpenidConfiguration = async ( options?: RequestInit): Promise<getOpenidConfigurationResponse> => {
  
  return customFetch<getOpenidConfigurationResponse>(getGetOpenidConfigurationUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getJwksResponse = {
  data: JwksResponseDto;
  status: number;
  headers: Headers;
}

export const getGetJwksUrl = () => {


  return `http://10.1.1.17:3000/.well-known/openid-configuration/jwks.json`
}

export const getJwks = async ( options?: RequestInit): Promise<getJwksResponse> => {
  
  return customFetch<getJwksResponse>(getGetJwksUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



